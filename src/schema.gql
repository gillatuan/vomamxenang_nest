# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthRegisterInput {
  address: String!
  email: String!
  password: String!
  phone: String!
}

input CreatePermissionInput {
  id: String
  method: String!
  module: String!
  name: String!
}

input CreatePermissionToValidate {
  id: String
  method: String
  module: String
  name: String
}

input CreateRoleInput {
  description: String!
  id: String
  isActive: Boolean!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FilterDto {
  s: String!
}

type JWTAccessToken {
  access_expire: String!
  access_token: String!
  refresh_token: String!
  user: UserPayload!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  authRegister(authRegisterInput: AuthRegisterInput!): UserType!
  createPermission(createPermissionInput: CreatePermissionInput!): PermissionType!
  createRole(createRoleInput: CreateRoleInput!): RoleType!
  deletePermission(id: String!): PermissionType!
  login(loginInput: LoginInput!): JWTAccessToken!
  registerUser(registerUserInput: RegisterUserInput!): UserResponse!
  removeUser(id: String!): UserResponse!
  updatePermission(id: String!, updateItemInput: UpdatePermissionInput!): PermissionType!
  updateRole(id: String!, updateItemInput: UpdateRoleInput!): RoleResponse!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): UserResponse!
}

type PermissionPaginationResponse {
  currentPage: Int!
  data: [PermissionType!]!
  limit: Int!
  skip: Int!
  total: Int!
  totalPages: Int!
}

type PermissionType {
  id: String
  method: String!
  module: String!
  name: String!
}

type PermissionTypeToValidate {
  id: String
  method: String
  module: String
  name: String
}

type Query {
  findAllRoles(qs: String): RolePaginationResponseInterceptor!
  findAllUsers(qs: String): UserPaginationResponseInterceptor!
  findOneUser(id: String!): UserResponse!
  helloPermissions: String!
  helloo: UserResponse!
  listPermissions(qs: String): PermissionPaginationResponse!
  me: UserResponse
  searchTermOfPermissions(filterDto: FilterDto!): PermissionPaginationResponse!
  searchTermsOfUser(filterDto: FilterDto!): UserPaginationResponseInterceptor!
}

input RegisterUserInput {
  address: String!
  avatar: String = ""
  email: String!
  password: String!
  phone: String!
}

type RolePaginationResponse {
  currentPage: Int!
  data: [RoleType!]!
  limit: Int!
  skip: Int!
  total: Int!
  totalPages: Int!
}

type RolePaginationResponseInterceptor {
  data: RolePaginationResponse
  error: String
  message: String!
  statusCode: Int!
}

type RoleResponse {
  data: RoleType
  error: String
  message: String!
  statusCode: Int!
}

type RoleType {
  description: String!
  id: String
  isActive: Boolean!
  name: String!
  permissions: [PermissionTypeToValidate!]!
}

input UpdatePermissionInput {
  id: String
  method: String
  module: String
  name: String
}

input UpdateRoleInput {
  description: String
  id: String
  isActive: Boolean
  name: String
  permissions: [CreatePermissionToValidate!] = []
}

input UpdateUserInput {
  address: String
  avatar: String = ""
  codeExpired: DateTime
  codeId: String
  email: String
  id: String
  isActive: Boolean = false
  isDeleted: Boolean = false
  password: String
  phone: String
  refreshToken: String
  role: CreateRoleInput
}

type UserPaginationResponse {
  currentPage: Int!
  data: [UserType!]!
  limit: Int!
  skip: Int!
  total: Int!
  totalPages: Int!
}

type UserPaginationResponseInterceptor {
  data: UserPaginationResponse
  error: String
  message: String!
  statusCode: Int!
}

type UserPayload {
  address: String!
  avatar: String!
  email: String!
  id: String!
}

type UserResponse {
  data: UserType
  error: String
  message: String!
  statusCode: Int!
}

type UserType {
  address: String!
  avatar: String
  codeExpired: DateTime!
  codeId: String!
  email: String!
  id: String
  isActive: Boolean
  isDeleted: Boolean
  phone: String!
  refreshToken: String!
  role: RoleType
}